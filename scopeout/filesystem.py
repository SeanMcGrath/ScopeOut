"""
Classes to handle scopeout's interactions with the filesystem,
particularly data export/import.
"""

import logging
import os

from csv import *
from datetime import datetime
from collections import Iterable

from scopeout.models import Waveform

FILE_HEADER = 'Waveforms generated by ScopeOut Data Acquisition Tool. \nFile Generated {}\n\n'


class WaveformCsvFile:
    """
    Handle reading/writing a waveform or list of waveforms to a .csv file.
    """

    def __init__(self, waveform, path):
        """
        Constructor.
        :param waveform: a single waveform or list of waveforms.
        :param path: an absolute path to the .csv file, whether it exists yet or not.
        """

        self.writer = None
        self.reader = None
        self.file = None
        self.path = path
        self.logger = logging.getLogger('ScopeOut.filesystem.WaveformCsvFile')

        try:
            assert isinstance(waveform, (Waveform, Iterable))
            self.waveform = waveform

        except AssertionError:
            self.logger.error('WaveformCsvFile must be instantiated with a waveform or iterable of waveforms.')
        except Exception as e:
            self.logger.error(e)

    def __enter__(self):
        if os.path.exists(self.path):
            self.file = open(self.path, newline='')
            self.reader = reader(self.file)

        else:
            self.file = open(self.path, 'w', newline='')
            self.writer = writer(self.file)

        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.file.close()

    @staticmethod
    def _write_header(file):
        """
        Write the standard data header to a file.
        :param file: the output file, opened for wrtiting.
        """
        file.write(FILE_HEADER.format(datetime.utcnow()))

    @staticmethod
    def _write_footer(file):
        """
        Write the standard data footer to a file.
        :param file: the output file, opened for writing.
        """
        pass

    def _write_wave(self, wave):
        """
        Write all of a wave's information to an open file.
        :param wave: a Waveform.
        :param file: an open file to write to.
        """

        assert isinstance(wave, Waveform)

        wave_dict = sorted(wave.__dict__.items())
        for key, value in wave_dict:
            if not isinstance(value, list) and not key.startswith('_'):
                self.writer.writerow([key, value])

        self.writer.writerow([''])
        self.writer.writerow(['X', 'Y'])

        for i in range(0, len(wave.x_list)):
            try:
                self.writer.writerow([str(wave.x_list[i]), str(wave.y_list[i])])
            except IndexError:
                self.logger.error('X and Y data incompatible.')

        self.writer.writerow([''])

    def write(self):
        """
        Dump the entire contents of the wrapped waveforms(s) to disk.
        """

        if not self.file:
            self.file = open(self.path, 'w', newline='')
            self.writer = writer(self.file)

        WaveformCsvFile._write_header(self.file)

        if isinstance(self.waveform, Iterable):
            for wave in self.waveform:
                self._write_wave(wave)

        elif isinstance(self.waveform, Waveform):
            self._write_wave(self.waveform)

        WaveformCsvFile._write_footer(self.file)

    def write_properties(self, properties=[]):
        """
        Write the specified properties of the wrapped waveform(s) to disk.
        :param properties: an iterable of wave property names.
        """

        if not self.file:
            self.file = open(self.path, 'w', newline='')
            self.writer = writer(self.file)

        if not properties:
            if isinstance(self.waveform, Iterable):
                properties = [key for key, value in self.waveform[0].__dict__.items()
                              if not key.startswith('_') and not isinstance(value, list)]
            else:
                properties = [key for key, value in self.waveform.__dict__.items()
                              if not key.startswith('_') and not isinstance(value, list)]

        WaveformCsvFile._write_header(self.file)
        self.writer.writerow(properties)

        if isinstance(self.waveform, Iterable):
            for wave in self.waveform:
                self.writer.writerow([getattr(wave, property) for property in properties])
        else:
            self.writer.writerow([getattr(self.waveform, property) for property in properties])
